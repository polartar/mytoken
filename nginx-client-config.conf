##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# https://www.nginx.com/resources/wiki/start/
# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
# https://wiki.debian.org/Nginx/DirectoryStructure
#
# In most cases, administrators will remove this file from sites-enabled/ and
# leave it as reference inside of sites-available where it will continue to be
# updated by the nginx packaging team.
#
# This file will automatically load configuration files provided by other
# applications, such as Drupal or Wordpress. These applications will be made
# available underneath a path with that package name, such as /drupal8.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Default server configuration
#

# https://stackoverflow.com/questions/35744650/docker-network-nginx-resolver
resolver 127.0.0.11 ipv6=off;
resolver_timeout 1s;

upstream api {
	server server:3030;
}

server {
    listen 80 default_server;
		listen [::]:80 default_server;

    server_name _;
    return 301 https://$host$request_uri;
}

server {
	listen 80;
	listen [::]:80;
	listen 443 ssl;
	listen [::]:443 ssl;

	server_name www.issue.tokenizer.cc;

	ssl_certificate /etc/ssl/private/cloudflare-tokenizer.pem;
	ssl_certificate_key /etc/ssl/private/cloudflare-tokenizer.key;
	
	return 301 https://issue.tokenizer.cc$request_uri;
}

server {
	listen 443 ssl;
	listen [::]:443 ssl;

	ssl_certificate /etc/ssl/private/cloudflare-tokenizer.pem;
	ssl_certificate_key /etc/ssl/private/cloudflare-tokenizer.key;

	root /var/www/html;

	# Add index.php to the list if you are using PHP
	index index.html index.htm index.nginx-debian.html;

	server_name issue.tokenizer.cc;

	location = /api {
	  proxy_pass http://api/;

	  proxy_set_header Host $http_host;
	  proxy_set_header X-Forwarded-Host $http_host;
	  proxy_set_header X-Real-IP $remote_addr;
	  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

	  add_header 'Access-Control-Allow-Origin' '*';
	  add_header 'Access-Control-Allow-Credentials' 'true';
	  add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Origin,X-Auth-Token,Aut horization,Accept,Client-Security-Token';
	  add_header 'Access-Control-Allow-Methods' 'OPTIONS, GET, POST, PATCH, PUT, DELETE';

	  proxy_http_version 1.1;
	  proxy_set_header Upgrade $http_upgrade;
	  proxy_set_header Connection "Upgrade";
	  proxy_set_header Host $host;
		}

  location /api/ {
    proxy_pass http://api/;

    proxy_set_header Host $http_host;
    proxy_set_header X-Forwarded-Host $http_host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    add_header 'Access-Control-Allow-Origin' '*';
    add_header 'Access-Control-Allow-Credentials' 'true';
    add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Origin,X-Auth-Token,Aut horization,Accept,Client-Security-Token';
    add_header 'Access-Control-Allow-Methods' 'OPTIONS, GET, POST, PATCH, PUT, DELETE';

    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "Upgrade";
    proxy_set_header Host $host;
	}

	location / {
    add_header 'Access-Control-Allow-Origin' '*';
    add_header 'Access-Control-Allow-Credentials' 'true';
    add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Origin,X-Auth-Token,Aut horization,Accept,Client-Security-Token';
    add_header 'Access-Control-Allow-Methods' 'OPTIONS, GET, POST, PATCH, PUT, DELETE';

		# Serve static files from /app directory of the Nginx container
		# Every URL (www.site.com/foo/bar) makes Nginx find the corresponding
		# file in the root (e.g. /app/foo/bar)
		root /app;

		# If the file above (e.g. /app/foo/bar) is actually a directory
		# try appending the files below (e.g. find /app/foo/bar/index.html)
		index index.html;

		# For every request, try finding the file, or the directory (see trailing slash),
		# and if all else fails, serve the React app in index.html so that it makes
		# react-router resolve the URI in JS at runtime.
		# NOTE: For react routes the do not exist, it will still serve with HTTP 200
		# Also remember to look into React Server-Side Rendering because if these and
		# related issues to optimize for SEO
		try_files $uri $uri/ /index.html;
	}

	location = /__test {
		return 418;
	}
}

server {
	listen 80;
	listen [::]:80;
	listen 443 ssl;
	listen [::]:443 ssl;

	server_name www.hub.tokenizer.cc www.hubs.tokenizer.cc www.apps.tokenizer.cc www.dashboard.tokenizer.cc apps.tokenizer.cc hubs.tokenizer.cc dashboard.tokenizer.cc;

	ssl_certificate /etc/ssl/private/cloudflare-tokenizer.pem;
	ssl_certificate_key /etc/ssl/private/cloudflare-tokenizer.key;
	
	return 301 https://hub.tokenizer.cc$request_uri;
}

server {
	listen 443 ssl;
	listen [::]:443 ssl;

	server_name hub.tokenizer.cc;

	ssl_certificate /etc/ssl/private/cloudflare-tokenizer.pem;
	ssl_certificate_key /etc/ssl/private/cloudflare-tokenizer.key;

	location / {
    proxy_pass http://dashboard:9000;
	}
}

server {
	listen 80;
	listen [::]:80;
	listen 443 ssl;
	listen [::]:443 ssl;

	server_name www.cms.tokenizer.cc;

	ssl_certificate /etc/ssl/private/cloudflare-tokenizer.pem;
	ssl_certificate_key /etc/ssl/private/cloudflare-tokenizer.key;
	
	return 301 https://cms.tokenizer.cc$request_uri;
}

server {
	listen 443 ssl;
	listen [::]:443 ssl;

	server_name cms.tokenizer.cc;

	ssl_certificate /etc/ssl/private/cloudflare-tokenizer.pem;
	ssl_certificate_key /etc/ssl/private/cloudflare-tokenizer.key;

	location / {
    proxy_pass http://cms:1337;
	}
}
